#foreign(header = "<stdio.h>")

@foreign
struct FILE;

@foreign func fopen(filename: char const*, mode: char const*): FILE*;
@foreign func fclose(stream: FILE*): int;
@foreign func fwrite(buffer: void const*, size: usize, count: usize, stream: FILE*): usize;
@foreign func putc(ch: int, stream: FILE*): int;

struct image_t {
  width, height : int;
  pixels: uint32*;
}

func pixels_size_for_image(width: int, height: int): usize {
  return width * height * sizeof(uint32);
}

func alloc_image(width: int, height: int): image_t {
  return {
    width = width,
    height = height,
    pixels = malloc(pixels_size_for_image(width, height)),
  };
}

func write_tga(filename: char const*, img: image_t*) {
  f := fopen(filename, "wb");
  #assert(f);

  putc(0, f); // id length
  putc(0, f); // color map type
  putc(2, f); // image type = uncompressed RGB

  // color map specification
  putc(0, f);
  putc(0, f);
  putc(0, f);
  putc(0, f);
  putc(0, f);

  // origin
  origin_x : uint16 = 0;
  origin_y : uint16 = 0;
  fwrite(&origin_x, sizeof(uint16), 1, f);
  fwrite(&origin_y, sizeof(uint16), 1, f);

  // width and height
  width : uint16 = img.width;
  height : uint16 = img.height;
  fwrite(&width, sizeof(uint16), 1, f);
  fwrite(&height, sizeof(uint16), 1, f);

  putc(32, f); // bits per pixel
  putc(0, f); // image descriptor

  fwrite(img.pixels, pixels_size_for_image(img.width, img.height), 1, f);
  fclose(f);
}

